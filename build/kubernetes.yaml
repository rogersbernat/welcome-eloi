apiVersion: v1
kind: Namespace
metadata:
  name: eloi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eloi
  namespace: eloi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eloi
  template:
    metadata:
      labels:
        app: eloi
    spec:
      securityContext:
        runAsNonRoot: true
        fsGroup: 2000
      containers:
      - name: eloi
        image: rogersbernat/eloi:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
          requests:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          runAsUser: 1000
          runAsGroup: 3000
          allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: eloi
  namespace: eloi
spec:
  selector:
    app: eloi
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: cert
    cert-manager.io/private-key-rotation-policy: Always
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: ix-traefik-chain-basic@kubernetescrd
    traefik.ingress.kubernetes.io/router.tls: "true"
  name: eloi
  namespace: eloi
spec:
  rules:
  - host: eloi.rogersbernat.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: eloi
            port:
              number: 80
  tls:
  - hosts:
    - eloi.rogersbernat.me
    secretName: eloi-tls